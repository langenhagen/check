#!/bin/bash
# lp3 - lint Python 3 files
#
# Call flake8 and pylint one after another for every given file.
#
# Usage:
#   lp3 [-l|--light] <FILE> [<FILE>] ...
#
# author: andreasl

files=()
light=false
while [ "$#" -gt 0 ]; do
    case "$1" in
    -l|--light)
        light=true
        ;;
    *)
        files+=("$1")
        ;;
    esac
    shift
done

if [ "$light" == 'true' ]; then
    light_flake8_error_codes_array=(
        # 'D100'  # flake8-docstrings Missing docstring in public module
        # 'D101'  # flake8-docstrings Missing docstring in public class
        # 'D102'  # flake8-docstrings Missing docstring in public method
        # 'D103'  # flake8-docstrings Missing docstring in public function
        # 'D104'  # flake8-docstrings Missing docstring in public package
        # 'D105'  # flake8-docstrings Missing docstring in magic method
        # 'D106'  # flake8-docstrings Missing docstring in public nested class
        # 'D107'  # flake8-docstrings Missing docstring in __init__
        'D200'  # flake8-docstrings One-line docstring should fit on one line with quotes
        'D201'  # flake8-docstrings No blank lines allowed before function docstring
        'D202'  # flake8-docstrings No blank lines allowed after function docstring
        # 'D203'  # flake8-docstrings 1 blank line required before class docstring
        # 'D204'  # flake8-docstrings 1 blank line required after class docstring
        # 'D205'  # flake8-docstrings 1 blank line required between summary line and description
        'D206'  # flake8-docstrings Docstring should be indented with spaces, not tabs
        'D207'  # flake8-docstrings Docstring is under-indented
        'D208'  # flake8-docstrings Docstring is over-indented
        # 'D209'  # flake8-docstrings Multi-line docstring closing quotes should be on a separate line
        'D210'  # flake8-docstrings No whitespaces allowed surrounding docstring text
        'D211'  # flake8-docstrings No blank lines allowed before class docstring
        'D212'  # flake8-docstrings Multi-line docstring summary should start at the first line
        'D213'  # flake8-docstrings Multi-line docstring summary should start at the second line
        'D214'  # flake8-docstrings Section is over-indented
        'D215'  # flake8-docstrings Section underline is over-indented
        'D300'  # flake8-docstrings Use “”“triple double quotes”“”
        'D301'  # flake8-docstrings Use r”“” if any backslashes in a docstring
        'D302'  # flake8-docstrings Use u”“” for Unicode docstrings
        'D400'  # flake8-docstrings First line should end with a period
        'D401'  # flake8-docstrings First line should be in imperative mood; try rephrasing
        'D402'  # flake8-docstrings First line should not be the function’s “signature”
        'D403'  # flake8-docstrings First word of the first line should be properly capitalized
        'D404'  # flake8-docstrings First word of the docstring should not be This
        'D405'  # flake8-docstrings Section name should be properly capitalized
        'D406'  # flake8-docstrings Section name should end with a newline
        'D407'  # flake8-docstrings Missing dashed underline after section
        'D408'  # flake8-docstrings Section underline should be in the line following the section’s name
        'D409'  # flake8-docstrings Section underline should match the length of its name
        'D410'  # flake8-docstrings Missing blank line after section
        'D411'  # flake8-docstrings Missing blank line before section
        'D412'  # flake8-docstrings No blank lines allowed between a section header and its content
        'D413'  # flake8-docstrings Missing blank line after last section
        'D414'  # flake8-docstrings Section has no content
        'D415'  # flake8-docstrings First line should end with a period, question mark, or exclamation point
        'D416'  # flake8-docstrings Section name should end with a colon
        'D417'  # flake8-docstrings Missing argument descriptions in the docstring
        'E101'  # indentation contains mixed spaces and tabs'
        'E111'  # indentation is not a multiple of four ; >70 offendings as of 19-07-16
        'E112'  # expected an indented block
        'E113'  # unexpected indentation
        'E114'  # indentation is not a multiple of four (comment)
        'E115'  # expected an indented block (comment)
        'E116'  # unexpected indentation (comment)
        'E11'   # indentations
        'E121'  # continuation line under-indented for hanging indent
        'E122'  # continuation line missing indentation or outdented; >60 offendings as of 19-07-16
        'E123'  # closing bracket does not match indentation of opening bracket's line
        'E124'  # closing bracket does not match visual indentation
        'E125'  # continuation line with same indent as next logical line
        'E126'  # continuation line over-indented for hanging indent
        'E127'  # continuation line over-indented for visual indent; >130 offendings as of 19-07-16
        'E128'  # continuation line under-indented for visual indent; >750 offendings as of 19-07-16
        'E129'  # visually indented line with same indent as next logical line
        'E131'  # continuation line unaligned for hanging indent
        'E133'  # closing bracket is missing indentation
        'E201'  # whitespace after '('
        'E202'  # whitespace before ')'
        'E203'  # whitespace before ':'
        'E211'  # whitespace before '('
        'E221'  # multiple spaces before operator
        'E222'  # multiple spaces after operator
        'E223'  # tab before operator
        'E224'  # tab after operator
        'E225'  # missing whitespace around operator
        'E226'  # missing whitespace around arithmetic operator
        'E227'  # missing whitespace around bitwise or shift operator
        'E228'  # missing whitespace around modulo operator
        'E231'  # missing whitespace after ',', ';', or ':'
        'E241'  # multiple spaces after ','
        'E241'  # multiple spaces after ','
        'E242'  # tab after ','
        'E251'  # unexpected spaces around keyword / parameter equals
        'E261'  # at least two spaces before inline comment; >125 offendings as of 2020-04-30
        'E262'  # inline comment should start with '# '
        'E265'  # block comment should start with '# '
        'E266'  # too many leading '#' for block comment; >140 offendings as of 19-07-16
        'E271'  # multiple spaces after keyword
        'E272'  # multiple spaces before keyword
        'E273'  # tab after keyword
        'E274'  # tab before keyword
        'E275'  # missing whitespace after keyword
        'E301'  # expected 1 blank line, found 0
        'E302'  # expected 2 blank lines, found 1
        'E303'  # too many blank lines
        'E304'  # blank lines found after function decorator
        'E305'  # expected 2 blank lines after class or function definition, found 1
        'E306'  # expected 1 blank line before a nested definition
        'E401'  # multiple imports on one line
        'E402'  # module level import not at top of file; >600 offendings as of 19-07-16
        # 'E501'  # line too long (82 > 79 characters)
        'E502'  # the backslash is redundant between brackets
        'E701'  # multiple statements on one line (colon); >40 offendings as of 19-07-16
        'E702'  # multiple statements on one line (semicolon)
        'E703'  # statement ends with a semicolon
        'E704'  # multiple statements on one line (def)
        'E711'  # comparison to none should be 'if cond is none:'
        'E712'  # comparison to true should be 'if cond is true:' or 'if cond:'
        'E713'  # test for membership should be 'not in'
        'E714'  # test for object identity should be 'is not'
        'E721'  # do not compare types, use 'isinstance()'
        'E722'  # do not use bare except, specify exception instead
        'E731'  # do not assign a lambda expression, use a def
        'E741'  # do not use variables named 'l', 'o', or 'i'
        'E742'  # do not define classes named 'l', 'o', or 'i'
        'E743'  # do not define functions named 'l', 'o', or 'i'
        'E90'   # indentations
        'E999'  # SyntaxError: invalid syntax
        'F401'  # 'foo' imported but unused
        'F402'  # import module from line N shadowed by loop variable
        'F403'  # ‘from module import *’ used; unable to detect undefined names
        'F404'  # future import(s) name after other statements
        'F405'  # name may be undefined, or defined from star imports: module
        'F811'  # redefinition of unused 'foo' from line N
        'F812'  # list comprehension redefines name from line n
        'F821'  # undefined name 'foo'
        'F822'  # undefined name name in __all__
        'F823'  # local variable name ... referenced before assignment
        'F831'  # duplicate argument name in function definition
        'F841'  # local variable name is assigned to but never used
        'W191'  # indentation contains tabs
        'W291'  # trailing whitespace
        'W292'  # no newline at end of file
        'W293'  # blank line contains whitespaces
        'W391'  # blank line at end of file
        # 'W503'  # line break occurred before a binary operator
        # 'W504'  # line break occurred after a binary operator
        'W601'  # .has_key() is deprecated, use 'in'
        'W602'  # deprecated form of raising exception
        'W603'  # '<>' is deprecated, use '!='
        'W604'  # backticks are deprecated, use 'repr()'
        'W605'  # invalid escape sequence 'x'
    )
    light_flake8_error_codes="$(printf '%s,' "${light_flake8_error_codes_array[@]}")"

    light_disabled_pylint_error_codes_array=(
        'C0103'
        'C0115'
        'C0116'
        'C0330'  # Wrong hanging indentation before block
        'E0401'
        'R0902'  # Too many instance attributes
        'R0903'
        'R0912'  # Too many branches
        'R0913'  # Too many arguments
        'R0914'  # Too many local variables
        'R0915'  # Too many statements
        'W0511'
        'W1203'
    )
    light_disabled_pylint_error_codes="$(printf '%s,' "${light_disabled_pylint_error_codes_array[@]}")"

    flake8_selection="--select=${light_flake8_error_codes}"
    pylint_ignores="--disable=${light_disabled_pylint_error_codes}"
fi

for file in "${files[@]}"; do
    printf '\e[1m=== %s ===\e[m\n' "$file"

    printf '*** flake8 %s ***\n' "$( flake8 --version | head -1 | cut -d' ' -f1)"
    # shellcheck disable=SC2086
    flake8 --max-line-length 88 ${flake8_selection} "$file"

    printf '*** %s ***\n' "$(pylint --version | head -1)"
    # shellcheck disable=SC2086
    pylint --msg-template='{msg_id} {path}:{line}: {msg}' --score=no ${pylint_ignores} "$file"

    printf '*** %s ***\n' "$(mypy --version)"
    mypy --ignore-missing-imports --follow-imports=skip --no-color-output --no-error-summary "$file"
done
